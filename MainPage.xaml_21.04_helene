using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using Windows.Devices.Bluetooth;
using Windows.Devices.Enumeration;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Security.Cryptography;
using Windows.Storage.Streams;
using Windows.UI.Core;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Automation.Peers;
using Windows.UI.Xaml.Media;
using System.Threading.Tasks;
using Windows.Storage.Pickers;
using Windows.Storage;
using System.Linq;
using System.Threading;
using WinRTXamlToolkit.Controls.DataVisualization.Charting;
using Windows.UI.Popups;

//This code has taken elements from scenario1 & scenario2 of the microsoft sample code.
//Referance: https://learn.microsoft.com/en-us/samples/microsoft/windows-universal-samples/bluetoothle/

namespace BLE_program
{
    public enum NotifyType
    {
        StatusMessage,
        ErrorMessage
    };

    public sealed partial class MainPage : Page
    {
        private BluetoothLEDevice bluetoothLeDevice = null;
        private GattCharacteristic temperatureCharacteristic;
        private GattCharacteristic heatingelementCharacteristic;
        private GattPresentationFormat presentationFormat;

        //Error codes
        //readonly int E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED = unchecked((int)0x80650003);
        //readonly int E_BLUETOOTH_ATT_INVALID_PDU = unchecked((int)0x80650004);
        //readonly int E_ACCESSDENIED = unchecked((int)0x80070005);
        //readonly int E_DEVICE_NOT_AVAILABLE = unchecked((int)0x800710df);

        public string SelectedBleDeviceId;
        public string SelectedBleDeviceName = "No device selected";
        public string TempNotRead = "Not reading";

        private List<BluetoothLEDeviceDisplay> KnownDevices = new List<BluetoothLEDeviceDisplay>();
        private List<DeviceInformation> UnknownDevices = new List<DeviceInformation>();

        private DeviceWatcher deviceWatcher;

        public GattDeviceService SelectedGattService { get; private set; }

        public float TemperatureSetValue;
        public float CurrentTemperature;
        public float Difference;
        public bool HeatElement;

        public int timeInterval = 1000; // Interval for temperaturereadings in milliseconds

        private bool isReading = false;
        private StreamWriter writer;
        private CancellationTokenSource cts;
        private CancellationTokenSource cts2;

        //HÃ¸rer til Graf i xaml
        public ObservableCollection<LineChartContent> lineChartCollection = new ObservableCollection<LineChartContent>();
        private int maxY;
        private int minY;
        private string firstTimeStamp = "";
        private string latestTimeStamp = "";

        public class LineChartContent
        {
            public string Time { get; set; }
            public double Temperature { get; set; }
        }

        public MainPage()
        {
            InitializeComponent();
            
            tbHeatElementStatus.Text = "OFF";
            tbCurrentTemp.Text = TempNotRead;
            NotifyUser("This program reads and regulates temperature. \nTo start, press 'Start Reading' button. \nReadings will be saved automatically in new file.", StatusBlock);

            //Disables all buttons except the one that initializes the program. 
            ConnectandReadButton.IsEnabled = true;
            StopButton.IsEnabled = false;
            StartComparing.IsEnabled = false;
            StopComparing.IsEnabled = false;
        }

        //Display a message to the user.
        public void NotifyUser(string strMessage, TextBlock targetBlock)
        {
            // If called from the UI thread, then update immediately.
            // Otherwise, schedule a task on the UI thread to perform the update.
            if (Dispatcher.HasThreadAccess)
            {
                UpdateStatus(strMessage, targetBlock);
            }
            else
            {
                var task = Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () => UpdateStatus(strMessage, targetBlock));
            }
        }

        //Update the message to the user.
        private void UpdateStatus(string strMessage, TextBlock targetBlock)
        {
            targetBlock.Text = strMessage;

            // Collapse the target block if it has no text to conserve real estate.
            targetBlock.Visibility = (targetBlock.Text != String.Empty) ? Visibility.Visible : Visibility.Collapsed;

            // Raise an event if necessary to enable a screen reader to announce the status update.
            var peer = FrameworkElementAutomationPeer.FromElement(targetBlock);
            peer?.RaiseAutomationEvent(AutomationEvents.LiveRegionChanged);
        }

        private async void ErrorMessage(string message)
        {
            var dialog = new MessageDialog(message, "Error");
            await dialog.ShowAsync();
        }

        private bool Not(bool value) => !value;

        //This method starts a device watcher that looks for all nearby Bluetooth devices.
        private void StartBleDeviceWatcher()
        {
            // Additional properties we would like about the device.
            // Property strings are documented here https://msdn.microsoft.com/en-us/library/windows/desktop/ff521659(v=vs.85).aspx
            string[] requestedProperties = { "System.Devices.Aep.DeviceAddress", "System.Devices.Aep.IsConnected", "System.Devices.Aep.Bluetooth.Le.IsConnectable" };

            var nano33BLEFilter = BluetoothLEDevice.GetDeviceSelectorFromDeviceName("Nano 33 BLE");
            deviceWatcher = DeviceInformation.CreateWatcher(
                nano33BLEFilter,
                requestedProperties,
                DeviceInformationKind.AssociationEndpoint);

            //Register eventhandlers before starting the watcher
            deviceWatcher.Added += DeviceWatcher_Added;
            deviceWatcher.Updated += DeviceWatcher_Updated;
            deviceWatcher.Removed += DeviceWatcher_Removed;
            deviceWatcher.EnumerationCompleted += DeviceWatcher_EnumerationCompleted;
            //deviceWatcher.Stopped += DeviceWatcher_Stopped;

            //Start over with an empty collection
            KnownDevices.Clear();

            //Start the watcher. Active enumeration last for approximately 30s.
            deviceWatcher.Start();
        }

        //Stops watching for all nearby Bluetooth devices
        private void StopBleDeviceWatcher()
        {
            if (deviceWatcher != null)
            {
                //Unregister the event handlers
                deviceWatcher.Added -= DeviceWatcher_Added;
                deviceWatcher.Updated -= DeviceWatcher_Updated;
                deviceWatcher.Removed -= DeviceWatcher_Removed;
                deviceWatcher.EnumerationCompleted -= DeviceWatcher_EnumerationCompleted;
                //deviceWatcher.Stopped -= DeviceWatcher_Stopped;

                //Stop the watcher
                deviceWatcher.Stop();
                deviceWatcher = null;
            }
        }

        private BluetoothLEDeviceDisplay FindBluetoothLEDeviceDisplay(string id)
        {
            foreach (BluetoothLEDeviceDisplay bleDeviceDisplay in KnownDevices)
            {
                if (bleDeviceDisplay.Id == id)
                {
                    return bleDeviceDisplay;
                }
            }
            return null;
        }
        private DeviceInformation FindUnknownDevices(string id)
        {
            foreach (DeviceInformation bleDeviceInfo in UnknownDevices)
            {
                if (bleDeviceInfo.Id == id)
                {
                    return bleDeviceInfo;
                }
            }
            return null;
        }

        //This method is called when a BLE device is discovered by a DeviceWatcher object.
        private async void DeviceWatcher_Added(DeviceWatcher sender, DeviceInformation deviceInfo)
        {
            //Updates the UI thread with info about a newly discovered BLE device
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                lock (this)
                {
                    if (sender == deviceWatcher)
                    {
                        if (deviceInfo.Name == "Nano 33 BLE")
                        {
                            if (FindBluetoothLEDeviceDisplay(deviceInfo.Id) == null)
                            {
                                if (deviceInfo.Name != string.Empty)
                                {
                                    KnownDevices.Add(new BluetoothLEDeviceDisplay(deviceInfo));
                                }
                            }
                        }
                    }
                }
            });
        }

        //Defines the event handler for DeviceWatcher.Updated, which is raised if the BLE devices properties have been updated.
        private async void DeviceWatcher_Updated(DeviceWatcher sender, DeviceInformationUpdate deviceInfoUpdate)
        {
            // Updates the UI thread because the collection is databound to a UI element.
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                lock (this)
                {
                    if (sender == deviceWatcher)
                    {
                        BluetoothLEDeviceDisplay bleDeviceDisplay = FindBluetoothLEDeviceDisplay(deviceInfoUpdate.Id);
                        if (bleDeviceDisplay != null)
                        {
                            // Device is already being displayed - update UX.
                            bleDeviceDisplay.Update(deviceInfoUpdate);
                            return;
                        }

                        DeviceInformation deviceInfo = FindUnknownDevices(deviceInfoUpdate.Id);
                        if (deviceInfo != null)
                        {
                            deviceInfo.Update(deviceInfoUpdate);
                            // If device has been updated with a friendly name it's no longer unknown.
                            if (deviceInfo.Name != String.Empty)
                            {
                                KnownDevices.Add(new BluetoothLEDeviceDisplay(deviceInfo));
                                UnknownDevices.Remove(deviceInfo);
                            }
                        }
                    }
                }
            });
        }


        //This method handles the DeviceWatcher.Removed event, which is raised when a BLE device is no longer available.
        private async void DeviceWatcher_Removed(DeviceWatcher sender, DeviceInformationUpdate deviceInfoUpdate)
        {
            // Updates the UI thread because the collection is databound to a UI element.
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                lock (this)
                {
                    if (sender == deviceWatcher)
                    {
                        // Find the corresponding DeviceInformation in the collection and remove it.
                        BluetoothLEDeviceDisplay bleDeviceDisplay = FindBluetoothLEDeviceDisplay(deviceInfoUpdate.Id);
                        if (bleDeviceDisplay != null)
                        {
                            KnownDevices.Remove(bleDeviceDisplay);
                        }

                        DeviceInformation deviceInfo = FindUnknownDevices(deviceInfoUpdate.Id);
                        if (deviceInfo != null)
                        {
                            UnknownDevices.Remove(deviceInfo);
                        }
                    }
                }
            });
        }

        private async void DeviceWatcher_EnumerationCompleted(DeviceWatcher sender, object e)
        {
            // Updates the UI thread because the collection is databound to a UI element.
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                if (sender == deviceWatcher)
                {
                    //Enumeration completed
                }
            });
        }

        private async Task<GattCharacteristic> GetCharacteristicAsync(GattDeviceService service, string uuidString, GattCharacteristicProperties properties)
        {
            Guid uuid = Guid.Parse(uuidString);
            var result = await service.GetCharacteristicsForUuidAsync(uuid, BluetoothCacheMode.Uncached);
            if (result.Status == GattCommunicationStatus.Success && result.Characteristics.Count > 0)
            {
                var characteristic = result.Characteristics.FirstOrDefault(c => c.CharacteristicProperties.HasFlag(properties));
                return characteristic;
            }
            return null;
        }

        private async Task<GattCharacteristic> GetCharacteristicAsync(GattDeviceService service, Guid uuid, GattCharacteristicProperties properties)
        {
            var result = await service.GetCharacteristicsForUuidAsync(uuid, BluetoothCacheMode.Uncached);
            if (result.Status == GattCommunicationStatus.Success && result.Characteristics.Count > 0)
            {
                var characteristic = result.Characteristics.FirstOrDefault(c => c.CharacteristicProperties.HasFlag(properties));
                return characteristic;
            }
            return null;
        }


        //This method is called when a user clicks the UI button named 'ConnectandReadButton'
        private async void ConnectandReadButton_Click()
        {
            StartBleDeviceWatcher();

            // Wait for a "Nano 33 BLE" device to be found
            while (SelectedBleDeviceId == null)
            {
                NotifyUser($"Connecting to Bluetooth device ...", StatusBlock);
                await Task.Delay(1000);
                foreach (var device in KnownDevices)
                {
                    if (device.Name == "Nano 33 BLE")
                    {
                        // Connect to the device
                        SelectedBleDeviceId = device.Id;
                        SelectedBleDeviceName = device.Name;

                        bluetoothLeDevice = await BluetoothLEDevice.FromIdAsync(SelectedBleDeviceId);
                        if (bluetoothLeDevice != null)
                        {
                            StopBleDeviceWatcher();
                            break;
                        }
                    }
                }
            }

            Guid customServiceUuid = Guid.Parse("707c54e2-aff4-40ea-b80f-4ec2339425d3");
            GattDeviceServicesResult result = await bluetoothLeDevice.GetGattServicesForUuidAsync(customServiceUuid, BluetoothCacheMode.Uncached);
            if (result.Status != GattCommunicationStatus.Success || result.Services.Count == 0)
            {
                NotifyUser("Custom Service not found", StatusBlock);
                return;
            }

            SelectedGattService = result.Services[0];
            heatingelementCharacteristic = await GetCharacteristicAsync(SelectedGattService, "be3764b5-bcff-4e5c-a55b-ca698ef3cab7", GattCharacteristicProperties.WriteWithoutResponse);
            if (heatingelementCharacteristic == null)
            {
                NotifyUser("Heating Element characteristic not found", StatusBlock);
            }
            else
            {
                //NotifyUser("Connected to Heating Element characteristic", NotifyType.StatusMessage, StatusBlock, StatusBorder);
            }

            temperatureCharacteristic = await GetCharacteristicAsync(SelectedGattService, GattCharacteristicUuids.TemperatureMeasurement, GattCharacteristicProperties.Read);
            if (temperatureCharacteristic == null)
            {
                NotifyUser("Temperature Measurement characteristic not found", StatusBlock);
            }
            else
            {
                //NotifyUser("Connected to Temperature Measurement characteristic", NotifyType.StatusMessage, StatusBlock, StatusBorder);
            }


            if (isReading)
            {
                return;
            }

            //Initiate Delete Chart Content
            DeleteChartContent();
            minY = 15; // Reset min/max Y-scale
            maxY = 20; //

            // Get the suggested start location
            StorageFolder folder = KnownFolders.DocumentsLibrary;

            // Create the file with the desired name and path
            string fileName = $"{DateTime.Now:ddMMyy_HHmmss}.txt";
            StorageFile file = await folder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            //Open the stream for writing
            using (StreamWriter writer = new StreamWriter(await file.OpenStreamForWriteAsync()))
            {
                // enable the stop button and disable the read button
                StopButton.IsEnabled = true;
                ConnectandReadButton.IsEnabled = false;

                isReading = true;

                NotifyUser("Reading temperature. Temperature displayed in graph ->", StatusBlock);

                cts = new CancellationTokenSource();
                CancellationToken token = cts.Token;

                try
                {
                    // BT_Code: Read the actual value from the device by using Uncached.
                    while (!token.IsCancellationRequested)
                    {
                        GattReadResult readResult = await temperatureCharacteristic.ReadValueAsync(BluetoothCacheMode.Uncached);
                        if (readResult.Status == GattCommunicationStatus.Success)
                        {
                            string formattedResult = FormatValueByPresentation(readResult.Value, presentationFormat);

                            //add timestamp
                            string valueWithTimeStamp = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {formattedResult}";

                            await writer.WriteLineAsync(valueWithTimeStamp);
                            await writer.FlushAsync();

                            tbCurrentTemp.Text = formattedResult;

                            await AddChartContentsAsync(DateTime.Now.ToString("HH:mm:ss"), Convert.ToDouble(CurrentTemperature));
                            LineChart.UpdateLayout();
                        }
                        else
                        {
                            ErrorMessage($"Read failed: {result.Status}");
                        }
                        await Task.Delay(timeInterval, token);
                        StartComparing.IsEnabled = true;
                    }
                }
                catch (TaskCanceledException)
                {
                    //The task was canceled
                }
                finally
                {
                    isReading = false;
                    ConnectandReadButton.IsEnabled = true;
                    StopButton.IsEnabled = false;
                }
                StopButton.IsEnabled = true;
            }
        }

        private string FormatValueByPresentation(IBuffer buffer, GattPresentationFormat format)
        {
            // BT_Code: For the purpose of this sample, this function converts only UInt32 and
            // UTF-8 buffers to readable text. It can be extended to support other formats if your app needs them.
            CryptographicBuffer.CopyToByteArray(buffer, out byte[] data);
            if (data != null)
            {
                try
                {
                    CurrentTemperature = BitConverter.ToSingle(data, 0);
                    return string.Format("{0:F2}", CurrentTemperature) + " Â°C";
                }
                catch (ArgumentException)
                {
                    return "Unknown format";
                }
            }
            else
            {
                return "Empty data received";
            }
        }

        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            if (!isReading)
            {
                return;
            }

            isReading = false;
            ConnectandReadButton.IsEnabled = true;
            StopButton.IsEnabled = false;

            tbCurrentTemp.Text = TempNotRead;

            // Cancel the reading loop
            cts.Cancel();

            // Dispose of the StreamWriter object if it exists
            writer?.Dispose();

            NotifyUser("Temperature reading stopped. \nFile containing temperature data saved and closed.", StatusBlock);
        }

        private async Task CompareTemperatureAndControlHeatingElement()
        {
            while (!cts2.IsCancellationRequested)
            {
                Difference = TemperatureSetValue - CurrentTemperature;

                if (Difference >= 1)
                {
                    HeatElement = true;
                    NotifyUser($"ON", tbHeatElementStatus);
                    byte[] value = new byte[] { 0x01 };
                    await WriteToStatusCharacteristicAsync(value);
                }
                else if (Difference <= -1)
                {
                    HeatElement = false;
                    NotifyUser($"OFF", tbHeatElementStatus);
                    byte[] value = new byte[] { 0x00 };
                    await WriteToStatusCharacteristicAsync(value);
                }
                else
                {
                    HeatElement = false;
                    NotifyUser($"OFF", tbHeatElementStatus);
                }

                await Task.Delay(timeInterval);
            }
        }

        private async Task WriteToStatusCharacteristicAsync(byte[] value)
        {
            if (heatingelementCharacteristic == null)
            {
                Debug.WriteLine("Alert Status characteristic not found");
            }

            using (var datawriter = new DataWriter())
            {
                datawriter.WriteBytes(value);

                try
                {
                    GattCommunicationStatus result = await heatingelementCharacteristic.WriteValueAsync(datawriter.DetachBuffer(), GattWriteOption.WriteWithoutResponse);
                    if (result == GattCommunicationStatus.Success)
                    {
                        Debug.WriteLine("Write to Alert Status characteristic successful");
                    }
                    else
                    {
                        Debug.WriteLine($"Error writing to Alert Status characteristic: {result}");
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error writing to Alert Status characteristic: {ex.Message}");
                }
            }
        }

        private async void StartComparing_Click(object sender, RoutedEventArgs e)
        {
            StartComparing.IsEnabled = false;
            StopComparing.IsEnabled = true;
            cts2 = new CancellationTokenSource();
            CancellationToken token2 = cts2.Token;

            if (!float.TryParse(tbGivenValue.Text, out float givenValue))
            {
                ErrorMessage($"Please enter a valid integer number.");
                cts2.Cancel();
            }
            else
            {
                TemperatureSetValue = givenValue;
                NotifyUser($"Temperature regulating started. Set Temperature = " + TemperatureSetValue, StatusBlock);
                await Task.Run(() => CompareTemperatureAndControlHeatingElement());
            }   
        }

        private async void StopComparing_Click(object sender, RoutedEventArgs e)
        {
            byte[] value = new byte[] { 0x00 };
            await WriteToStatusCharacteristicAsync(value);
            cts2.Cancel();
            NotifyUser($"Temperature regulating stopped", StatusBlock);
        }

        //Metoder til Graf i xaml
        private async Task AddChartContentsAsync(string time, double temperature)
        {
            await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =>
            {
                lineChartCollection.Add(new LineChartContent() { Time = time, Temperature = temperature });
                System.Diagnostics.Debug.WriteLine("lineCharList Count: " + lineChartCollection.Count);
                (LineChart.Series[0] as LineSeries).ItemsSource = null;
                (LineChart.Series[0] as LineSeries).ItemsSource = lineChartCollection;

                // Set the first timestamp
                if (string.IsNullOrEmpty(firstTimeStamp))
                {
                    firstTimeStamp = time;
                    FirstTimeStampTextBlock.Text = "Start Time: " + firstTimeStamp;
                }
                // Update the latest timestamp
                latestTimeStamp = time;
                LatestTimeStampTextBlock.Text = "Last Reading: " + latestTimeStamp;

                if (temperature < minY)
                {
                    minY = (int)Math.Round(temperature) - 2;
                }
                else if (temperature + 2 > maxY)
                {
                    maxY = (int)Math.Round(temperature) + 2;
                }

                ((LineSeries)LineChart.Series[0]).DependentRangeAxis = new LinearAxis()
                {
                    Orientation = AxisOrientation.Y,
                    Maximum = maxY,
                    Minimum = minY,
                    ShowGridLines = true,
                    Visibility = Visibility.Visible,
                };
            });
        }


        private void DeleteChartContent()
        {
            lineChartCollection.Clear();
        }

    }
}
